import { join, resolve } from "path";
import { renderToStaticMarkup } from "react-dom/server";
import { renderAsync } from "@resvg/resvg-js";

async function asPng(contentObject) {
  const parsedContent = parseContent(contentObject);
  const svg = renderToStaticMarkup(renderTemplate(parsedContent));


  const renderBuffer = await renderAsync(svg, {
    fitTo: {
      mode: 'width',
      value: 1280,
    },
    font: {
      fontFiles: [
        join(resolve('.'), 'fonts', 'Poppins-Regular.ttf'),
        join(resolve('.'), 'fonts', 'Poppins-Bold.ttf'),
        join(resolve('.'), 'fonts', 'NotoEmoji-Bold.ttf'),
      ],
      loadSystemFonts: false,
      defaultFontFamily: 'Poppins',
    },
  });

  return renderBuffer.asPng();
}

export function parseContent(content) {
  let title = content.title;

  // Regex to wrap text: https://stackoverflow.com/a/51506718
  title = title.replace(/(?![^\n]{1,24}$)([^\n]{1,24})\s/g, "$1_").split("_");

  title = title.length <= 3 ? title : [title[0], title[1], title[2] + "..."];

  // Measure author text width: https://bl.ocks.org/tophtucker/62f93a4658387bb61e4510c37e2e97cf
  function measureText(string, fontSize = 32) {
    const widths = [
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0.246875, 0.2578125, 0.3203125, 0.61640625,
      0.56171875, 0.7328125, 0.621875, 0.175, 0.3421875, 0.34765625, 0.43125,
      0.5671875, 0.196875, 0.2765625, 0.26328125, 0.4125, 0.56171875,
      0.56171875, 0.56171875, 0.56171875, 0.56171875, 0.56171875, 0.56171875,
      0.56171875, 0.56171875, 0.56171875, 0.2421875, 0.21171875, 0.50859375,
      0.54921875, 0.52265625, 0.47265625, 0.8984375, 0.65234375, 0.62265625,
      0.6515625, 0.65625, 0.56875, 0.553125, 0.68125, 0.71328125, 0.27265625,
      0.55234375, 0.62744140625, 0.53828125, 0.8734375, 0.71328125, 0.6875,
      0.63125, 0.6875, 0.61640625, 0.59375, 0.596875, 0.6484375, 0.63671875,
      0.8875, 0.62734375, 0.60078125, 0.59921875, 0.265625, 0.41015625,
      0.265625, 0.41796875, 0.4515625, 0.309375, 0.54453125, 0.56171875,
      0.5234375, 0.5640625, 0.53046875, 0.3486328125, 0.56171875, 0.55078125,
      0.24296875, 0.27080078125, 0.50703125, 0.24296875, 0.8765625, 0.55234375,
      0.5703125, 0.56171875, 0.56875, 0.3390625, 0.515625, 0.32734375,
      0.5515625, 0.484375, 0.7515625, 0.49609375, 0.4734375, 0.49609375,
      0.3390625, 0.24375, 0.3390625, 0.68046875,
    ];
    const avg = 0.5117845394736842;
    return (
      string
        .split("")
        .map((c) =>
          c.charCodeAt(0) < widths.length ? widths[c.charCodeAt(0)] : avg
        )
        .reduce((cur, acc) => acc + cur) * fontSize
    );
  }

  return {
    title,
    username: content.owner_username,
    usernameWidth: measureText(content.owner_username),
  };
}

export function renderTemplate({ title, username, usernameWidth }) {
  function renderPostHeader(title) {
    return (
      <text y="54" fill="#212529" fontSize="75" fontWeight="bold">
        {title.map((line, index) => (
          <tspan x="60" dy={100} key={index}>
            {line}
          </tspan>
        ))}
      </text>
    );
  }

  function renderCommentHeader(title, parentTitle) {
    return (
      <>
        {/* reference */}
        <text fill="#424C56" fontSize="32">
          <tspan x="60" y="123.938">
            Em resposta a
          </tspan>
        </text>
        <text fill="#424C56" fontSize="32" textDecoration="underline">
          <tspan x="275" y="123.938">
            {"parentTitle"}
          </tspan>
        </text>

        {/* title */}
        <text y="155" fill="#212529" fontSize="75" fontWeight="bold">
          {title.map((line, index) => (
            <tspan x={60} dy={90} key={index}>
              {line}
            </tspan>
          ))}
        </text>
      </>
    );
  }

  return (
    <svg width="1200" height="628" xmlns="http://www.w3.org/2000/svg">
      {/* background */}
      <rect width="1200" height="628" fill="url(#paint0_radial_1_2)" />

      {/* title */}
      {renderPostHeader(title)}

      {/* tabnews icon */}
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M1149.59 144.853C1150.84 146.121 1150.84 148.156 1149.59 149.424C1148.31 150.704 1146.22 150.699 1144.94 149.413C1143.66 148.127 1143.66 146.046 1144.95 144.766C1145.58 144.157 1146.42 143.824 1147.29 143.841C1148.16 143.857 1148.99 144.222 1149.59 144.853ZM1050.51 50.4597C1049.23 51.7461 1049.23 53.8269 1050.52 55.1072C1051.81 56.3876 1053.9 56.3827 1055.18 55.0963C1056.38 53.8037 1056.35 51.7894 1055.1 50.5401C1053.85 49.2908 1051.83 49.2553 1050.53 50.4597H1050.51ZM1100.01 47.5072C1098.2 47.5072 1096.73 48.976 1096.73 50.7878C1096.73 52.5996 1098.2 54.0684 1100.01 54.0684C1101.83 54.0684 1103.3 52.5996 1103.3 50.7878C1103.3 48.976 1101.83 47.5072 1100.01 47.5072ZM1100.12 145.925C1098.3 145.925 1096.83 147.393 1096.83 149.205C1096.83 151.017 1098.3 152.486 1100.12 152.486H1100.23C1102.04 152.486 1103.52 151.017 1103.52 149.205C1103.52 147.393 1102.04 145.925 1100.23 145.925H1100.12ZM1050.46 144.853C1049.38 145.932 1049.19 147.607 1050 148.899C1050.25 149.331 1050.61 149.692 1051.05 149.949C1052.51 150.857 1054.42 150.49 1055.44 149.105C1056.45 147.721 1056.23 145.788 1054.92 144.672C1053.62 143.557 1051.67 143.635 1050.46 144.853ZM1144.94 50.5254C1143.87 51.6311 1143.68 53.3296 1144.51 54.637C1144.74 55.0189 1145.07 55.3408 1145.45 55.5774C1146.76 56.3891 1148.46 56.209 1149.57 55.1401C1150.45 54.3222 1150.81 53.0905 1150.51 51.9282C1150.21 50.7658 1149.3 49.8582 1148.14 49.5614C1146.98 49.2645 1145.74 49.6258 1144.92 50.5035L1144.94 50.5254ZM1058.84 79.7008C1065 67.4321 1076.27 58.5017 1089.64 55.2931C1089.99 55.2165 1090.29 54.999 1090.48 54.6924C1090.66 54.3858 1090.71 54.0174 1090.61 53.6747C1090.26 52.5561 1090.12 51.3875 1090.17 50.2192C1090.2 49.8102 1090.03 49.4108 1089.72 49.1432C1089.41 48.8756 1088.99 48.7717 1088.59 48.8632C1086.79 49.2787 1085.02 49.6943 1083.27 50.2848C1060.94 57.8166 1046.36 79.2563 1047.59 102.748C1048.82 126.241 1065.56 146.048 1088.55 151.217C1088.95 151.302 1089.38 151.189 1089.69 150.913C1090 150.638 1090.16 150.231 1090.12 149.818C1090.04 148.643 1090.18 147.463 1090.54 146.34C1090.64 145.998 1090.59 145.629 1090.41 145.323C1090.23 145.016 1089.93 144.798 1089.58 144.722C1076.22 141.497 1064.95 132.571 1058.77 120.314C1052.55 107.489 1052.55 92.5259 1058.77 79.7008H1058.84ZM1136.75 151.698C1114.71 167.345 1085.16 167.345 1063.11 151.698C1062.82 151.499 1062.47 151.423 1062.12 151.489C1061.77 151.555 1061.47 151.756 1061.27 152.048C1060.49 153.042 1059.63 153.978 1058.71 154.848C1058.46 155.095 1058.31 155.434 1058.31 155.788C1058.31 156.143 1058.46 156.482 1058.71 156.729C1064.46 161.123 1070.98 164.422 1077.92 166.461C1099.19 173.479 1122.53 169.936 1140.74 156.925C1141.05 156.677 1141.24 156.298 1141.24 155.898C1141.24 155.497 1141.05 155.119 1140.74 154.87C1139.82 154.077 1139.03 153.148 1138.39 152.114C1138.03 151.586 1137.33 151.409 1136.75 151.698ZM1144.45 54.637C1144.68 55.0189 1145 55.3408 1145.39 55.5774L1144.93 55.0963L1144.45 54.637ZM1099.95 78.1262C1087.85 78.1262 1078.04 87.9176 1078.04 99.9965C1078.04 112.075 1087.85 121.867 1099.95 121.867C1112.05 121.867 1121.86 112.075 1121.86 99.9965C1121.86 87.9518 1112.1 78.174 1100.03 78.1262H1099.95ZM1145.96 99.9965C1145.99 107.037 1144.39 113.988 1141.29 120.314C1135.11 132.571 1123.85 141.497 1110.49 144.722C1110.14 144.798 1109.84 145.016 1109.66 145.323C1109.47 145.629 1109.43 145.997 1109.52 146.34C1109.87 147.465 1110.01 148.643 1109.94 149.818C1109.9 150.231 1110.07 150.638 1110.38 150.913C1110.69 151.189 1111.11 151.302 1111.52 151.217C1126.71 147.82 1139.62 137.876 1146.76 124.062C1153.9 110.248 1154.54 93.9862 1148.5 79.6568C1142.6 65.8999 1131.19 55.2448 1117.04 50.2848C1115.3 49.7214 1113.53 49.2469 1111.74 48.8632C1111.34 48.7733 1110.91 48.8771 1110.6 49.1436C1110.29 49.41 1110.11 49.8082 1110.14 50.2191C1110.21 51.3866 1110.07 52.5572 1109.72 53.6747C1109.62 54.0174 1109.67 54.3858 1109.85 54.6924C1110.04 54.999 1110.34 55.2164 1110.69 55.2931C1124.06 58.5017 1135.33 67.4321 1141.49 79.7008C1144.54 86.0291 1146.1 92.9724 1146.05 99.9965H1145.96ZM1152.09 138.554C1153.12 139.188 1154.05 139.977 1154.85 140.894C1155.11 141.195 1155.49 141.358 1155.89 141.337C1156.29 141.316 1156.66 141.112 1156.89 140.785C1169.93 122.61 1173.48 99.3101 1166.46 78.0822C1164.42 71.1456 1161.11 64.6438 1156.71 58.9018C1156.46 58.6479 1156.12 58.5047 1155.77 58.5047C1155.41 58.5047 1155.07 58.6479 1154.83 58.9018C1153.95 59.8215 1153.02 60.6767 1152.02 61.4607C1151.73 61.6559 1151.53 61.9604 1151.46 62.3058C1151.39 62.6511 1151.47 63.0085 1151.67 63.2978C1167.34 85.3023 1167.34 114.8 1151.67 136.805C1151.31 137.404 1151.5 138.18 1152.09 138.554ZM1047.91 61.4168C1046.87 60.7903 1045.94 60.0001 1045.15 59.0767C1044.89 58.7761 1044.5 58.6127 1044.1 58.6341C1043.71 58.6555 1043.34 58.8592 1043.11 59.1861C1030.07 77.3608 1026.51 100.661 1033.54 121.889C1035.58 128.826 1038.89 135.327 1043.29 141.069C1043.54 141.323 1043.88 141.466 1044.23 141.466C1044.58 141.466 1044.92 141.323 1045.17 141.069C1046.04 140.151 1046.98 139.303 1047.98 138.532C1048.27 138.333 1048.47 138.025 1048.54 137.676C1048.6 137.327 1048.53 136.966 1048.33 136.673C1032.65 114.669 1032.65 85.1713 1048.33 63.1664C1048.69 62.5671 1048.5 61.7917 1047.91 61.4168ZM1063.24 48.2945C1085.28 32.6485 1114.83 32.6485 1136.88 48.2945C1137.17 48.4945 1137.53 48.57 1137.87 48.5043C1138.22 48.4385 1138.52 48.2369 1138.72 47.9446C1139.5 46.9507 1140.36 46.015 1141.28 45.1452C1141.54 44.8981 1141.68 44.559 1141.68 44.2047C1141.68 43.8505 1141.54 43.5114 1141.28 43.2643C1135.53 38.8704 1129.02 35.5713 1122.07 33.5319C1100.8 26.5201 1077.46 30.0717 1059.25 43.0893C1058.93 43.3166 1058.72 43.682 1058.7 44.0796C1058.68 44.4772 1058.84 44.8623 1059.14 45.1233C1060.07 45.9099 1060.86 46.8404 1061.49 47.879C1061.86 48.4707 1062.65 48.6469 1063.24 48.2727V48.2945Z"
        fill="#white"
      />

      {/* username container */}
      <rect
        x="60"
        y="511"
        width={usernameWidth + 40}
        height="68"
        rx="8"
        fill="#C7D9EC"
      />

      {/* username */}
      <text x="70" y="555" fill="#424C56" fontSize="32">
        <tspan>{username}</tspan>
      </text>
      <defs>
        <radialGradient
          id="paint0_radial_1_2"
          cx="0"
          cy="0"
          r="1"
          gradientUnits="userSpaceOnUse"
          gradientTransform="translate(285 449) rotate(-139.146) scale(811.762 1139)"
        >
          <stop stopColor="#F26419" />
          <stop offset="1" stopColor="#716B6B" stopOpacity="0" />
        </radialGradient>
      </defs>
    </svg>
  );
}

export default Object.freeze({
  asPng,
});
